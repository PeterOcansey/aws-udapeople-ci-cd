version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_to_destroy:
        type: string
        default: "on_fail"  
    steps:
      - run:
          name: Destroy environments "<<parameters.stack_to_destroy>>"
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.stack_to_destroy>>"
  destroy-frontend-bucket:
    description: Clear Content Of Front-End S3 Bucket.
    parameters:
      s3_to_empty:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Clear content of S3 "<<parameters.s3_to_empty>>"
          when: on_fail
          command: |
            aws s3 rm s3://"<<parameters.s3_to_empty>>" --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run: 
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  ########### Build Backend & Front Jobs ###########
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  
  ########### Test Backend & Frontend Jobs ###########
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm run test
   
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend-end tests
          command: |
            cd backend
            npm run test
  

########### Scan Backend & Frontend For Vulnerabilities ###########
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-build]
      - run:
          name: Scan frontend for vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend for vulnerabilities
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  
  ########### Create and Deploy Infrastructure ############
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install yum tar gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Export Back-end url to memstash.io
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
                 -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
                 --request PUT --data ${PUBLIC_DNS} https://api.memstash.io/values/po_udapeople_dns

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[*].Instances[0].PublicIpAddress" \
                --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          stack_to_destroy: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack_to_destroy: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  
  ############ Configure Infrastructure #############
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: pip install awscli
      - add_ssh_keys:
          fingerprints: [7d:e5:47:42:66:09:02:d3:0f:e4:77:73:99:10:c1:85]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          stack_to_destroy: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack_to_destroy: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  
  ############ Run Migrations ##############
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations:revert
            npm run migrations >> output.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat output.txt
            if cat output.txt | grep -q "has been executed sucessfully"; then
                curl -H "Content-Type: text/plain" -H \ 
                "token: ${CIRCLE_WORKFLOW_ID:0:7} " \ 
                --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          stack_to_destroy: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack_to_destroy: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  

  
  ########### Deploy Frontend Application ############
  deploy-frontend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install awscli
      - run:
          name: Get backend url
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> backend_url.txt
            BACKEND_IP="$(cat backend_url.txt)"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-frontend-bucket:
          s3_to_empty: "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack_to_destroy: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack_to_destroy: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context:
            - CircleCISlackContext
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]